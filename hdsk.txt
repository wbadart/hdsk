-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Unified data science toolkit for Haskell and more
--   
--   Please see the README on GitHub at
--   <a>https://github.com/wbadart/hdsk</a>
@package hdsk
@version 0.1.0.0


module Hdsk.Bayesian.Bins


-- | A simple implementation of a Naive Bayes classifier for purely
--   categorical data.
module Hdsk.Bayesian.NaiveBayes

-- | Type alias for the conditional probability table data structure. Maps
--   labels to lookup tables where lookup tables map from feature values to
--   the number of times that feature value was observed with the parent
--   label.
type CPT = Map String (Map String Int)

-- | /O(n * k * (log l + log m)) where n is the number of data points, k is
--   the length of each data point, l is the number of labels, and m is the
--   gretest number of feature values for any feature./ Generate the
--   conditional probability tables over the dataset. Counts the occurences
--   of each feature value given a class. Maps from class label to a map
--   from feature value to count.
mkTables :: [[String]] -> [CPT]

-- | /O(l k m) where l is the number of labels, k is the length of each
--   feature vector, and m is the number of feature values./ Given a list
--   of conditional probability tables and an unlabeled tuple, predicts the
--   label of the tuple.
classify :: [CPT] -> [String] -> String

-- | /O(k m) where k is the length of the feature vector and m is the
--   number of feature values./ Given conditional probability tables, a
--   tuple, and a label calculate the posterior probability of the label
--   given that tuple. P(C|X)
posterior :: [CPT] -> [String] -> String -> Double

-- | <i>O(m)</i> Given a class, feature value, and conditional probability
--   table, compute the likelihood of that configuration. P(x_i|c)
likelihood :: String -> String -> CPT -> Double

-- | <i>O(m) where m is the number of feature values.</i> Computes the
--   frequency of the given label from the given conditional prob. table.
labelCount :: Num n => CPT -> String -> n

-- | <i>O(l m)</i> Calculate the number of training instances from a CPT.
dataLength :: Num n => CPT -> n


-- | This module contains basic numerical descriptive statistics that are
--   applicable to a vector of doubles.
module Hdsk.Description

-- | <i>O(n)</i> Computes the arithmetic mean of a collection of numbers.
mean :: (Foldable f, Fractional n) => f n -> n

-- | <i>O(n)</i> Computes the unbiased variance of a collection of numbers.
var :: (Foldable f, Functor f, Floating n) => f n -> n

-- | <i>O(n)</i> Computes the standard deviation of a collection of
--   numbers.
std :: (Foldable f, Functor f, Floating n) => f n -> n

-- | <i>O(n)</i> Selects the element which is greater than <tt>p</tt>% of
--   the rest. When the <tt>p</tt>-th percentile does not land directly on
--   a whole index, midpoint interpolation is used to average left and
--   right side of the split.
percentile :: (Selectable p, RealFrac n) => n -> p n -> n

-- | <i>O(n)</i> Finds the median element the collection.
median :: (Selectable p, RealFrac n) => p n -> n

-- | <i>O(n)</i> Finds the first quartile of a collection of numbers.
q1 :: (Selectable p, RealFrac n) => p n -> n

-- | <i>O(n)</i> Finds the third quartile of a collection of numbers.
q3 :: (Selectable p, RealFrac n) => p n -> n

-- | <i>O(n)</i> Inter-quartile range. The distance between the first and
--   third quartiles.
iqr :: (Selectable p, RealFrac n) => p n -> n

-- | <i>O(n)</i> Simple implementation of quickselct (aka Hoare's algorithm
--   or k-rank). Selects the <tt>k</tt>-smallest element from the
--   collection.
select :: (Selectable p, Ord a) => Int -> p a -> a

-- | Defines a container which is suitable for the k-rank/ select
--   algorithm.
class Foldable p => Selectable p
instance Hdsk.Description.Selectable Data.Vector.Vector
instance Hdsk.Description.Selectable Data.Sequence.Internal.Seq
instance Hdsk.Description.Selectable []
