-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Unified data science toolkit for Haskell and more
--   
--   Please see the README on GitHub at
--   <a>https://github.com/wbadart/hdsk</a>
@package hdsk
@version 0.1.0.0


-- | A simple implementation of a Naive Bayes classifier for purely
--   categorical data.
module Hdsk.Bayesian.NaiveBayes

-- | Type alias for the conditional probability table data structure. Maps
--   labels to lookup tables where lookup tables map from feature values to
--   the number of times that feature value was observed with the parent
--   label.
type CPT = Map String (Map String Int)

-- | /O(n * k * (log l + log m)) where n is the number of data points, k is
--   the length of each data point, l is the number of labels, and m is the
--   gretest number of feature values for any feature./ Generate the
--   conditional probability tables over the dataset. Counts the occurences
--   of each feature value given a class. Maps from class label to a map
--   from feature value to count.
mkTables :: [[String]] -> [CPT]

-- | /O(l k m) where l is the number of labels, k is the length of each
--   feature vector, and m is the number of feature values./ Given a list
--   of conditional probability tables and an unlabeled tuple, predicts the
--   label of the tuple.
classify :: [CPT] -> [String] -> String

-- | /O(k m) where k is the length of the feature vector and m is the
--   number of feature values./ Given conditional probability tables, a
--   tuple, and a label calculate the posterior probability of the label
--   given that tuple. P(C|X)
posterior :: [CPT] -> [String] -> String -> Double

-- | <i>O(m)</i> Given a class, feature value, and conditional probability
--   table, compute the likelihood of that configuration. P(x_i|c)
likelihood :: String -> String -> CPT -> Double

-- | <i>O(m) where m is the number of feature values.</i> Computes the
--   frequency of the given label from the given conditional prob. table.
labelCount :: Num n => CPT -> String -> n

-- | <i>O(l m)</i> Calculate the number of training instances from a CPT.
dataLength :: Num n => CPT -> n


-- | This module contains basic numerical descriptive statistics that are
--   applicable to a vector of doubles.
module Hdsk.Description

-- | <i>O(n)</i> Computes the arithmetic mean of a vector of doubles.
mean :: Vector Double -> Double

-- | <i>O(n)</i> Computes the unbiased variance of a vector of doubles.
var :: Vector Double -> Double

-- | <i>O(n)</i> Computes the standard deviation of a vector of doubles.
std :: Vector Double -> Double

-- | <i>O(n log n)</i> Finds the <tt>p</tt>th percentile of the vector of
--   doubles, i.e. the element which is greater than <tt>p</tt>% of the
--   other elements. Uses fractional interpolation when <tt>p</tt> does not
--   generate a whole index.
--   
--   Unfortunately, the equation for fractional interpolation breaks down
--   both at the bounds of lists and for lists shorter than 2 elements. On
--   the flip side, these special cases can be handled in <i>O(n)</i> or
--   even <i>O(1)</i> time for the singleton case.
percentile :: Double -> Vector Double -> Double

-- | <i>O(n log n)</i> Finds the first quartile of a vector of doubles.
q1 :: Vector Double -> Double

-- | <i>O(n log n)</i> Finds the third quartile of a vector of doubles.
q3 :: Vector Double -> Double

-- | <i>O(n log n)</i> Finds the median element the vector. Undefined for
--   empty vectors.
median :: Vector Double -> Double

-- | <i>O(n log n)</i> Finds the interquartile range of a vector of
--   doubles.
iqr :: Vector Double -> Double

-- | <i>O(n log n)</i> Gives a copy of the input vector with all of the
--   outliers filtered out. Outliers are considered to be points beyond 1.5
--   IQR from the median
noOutliers :: Vector Double -> Vector Double


-- | This module contains basic numerical descriptive statistics that are
--   applicable to a list of numbers.
module Hdsk.Description.Generic

-- | Computes the arithmetic mean of a list of real numbers.
--   
--   <pre>
--   &gt;&gt;&gt; mean [1, 3, 3, 4]
--   2.75
--   
--   &gt;&gt;&gt; mean [10]
--   10.0
--   </pre>
genericMean :: (Real r, Fractional p) => [r] -> p

-- | Computes the variance of a list of numbers.
--   
--   <pre>
--   &gt;&gt;&gt; var [1, 2]
--   0.25
--   
--   &gt;&gt;&gt; var [10.12, 10.12]
--   0.0
--   </pre>
genericVar :: (Real p, Floating p) => [p] -> p

-- | Computes the standard deviation of a list of numbers.
--   
--   <pre>
--   &gt;&gt;&gt; std [1, 1, 1]
--   0.0
--   
--   &gt;&gt;&gt; std [1, 2]
--   0.5
--   </pre>
genericStd :: (Real p, Floating p) => [p] -> p
